diff --git a/node_modules/vite-plugin-glsl/src/loadShader.js b/node_modules/vite-plugin-glsl/src/loadShader.js
index fc6c756..64e0924 100644
--- a/node_modules/vite-plugin-glsl/src/loadShader.js
+++ b/node_modules/vite-plugin-glsl/src/loadShader.js
@@ -61,7 +61,7 @@ const include = /#include(\s+([^\s<>]+));?/gi;
  * 
  * @returns {string} Copy of "recursiveChunk" path
  */
-function resetSavedChunks () {
+function resetSavedChunks() {
   const chunk = recursiveChunk;
   duplicatedChunks.clear();
   dependentChunks.clear();
@@ -79,7 +79,7 @@ function resetSavedChunks () {
  * 
  * @returns {string} Chunk path that started a recursion
  */
-function getRecursionCaller () {
+function getRecursionCaller() {
   const dependencies = [...dependentChunks.keys()];
   return dependencies[dependencies.length - 1];
 }
@@ -94,7 +94,7 @@ function getRecursionCaller () {
  * 
  * @throws {Warning} If shader chunk was already included
  */
-function checkDuplicatedImports (path) {
+function checkDuplicatedImports(path) {
   if (!allChunks.has(path)) return;
   const caller = getRecursionCaller();
 
@@ -107,7 +107,7 @@ function checkDuplicatedImports (path) {
   emitWarning(`'${path}' was included multiple times.`, {
     code: 'vite-plugin-glsl',
     detail: 'Please avoid multiple imports of the same chunk in order to avoid' +
-    ` recursions and optimize your shader length.\nDuplicated import found in file '${caller}'.`
+      ` recursions and optimize your shader length.\nDuplicated import found in file '${caller}'.`
   });
 }
 
@@ -121,15 +121,15 @@ function checkDuplicatedImports (path) {
  * 
  * @returns {string} Shader's source code without comments
  */
-function removeSourceComments (source) {
+function removeSourceComments(source) {
   if (source.includes('/*') && source.includes('*/')) {
     source = source.slice(0, source.indexOf('/*')) +
-    source.slice(source.indexOf('*/') + 2, source.length);
+      source.slice(source.indexOf('*/') + 2, source.length);
   }
 
   const lines = source.split('\n');
 
-  for (let l = lines.length; l--; ) {
+  for (let l = lines.length; l--;) {
     if (lines[l].includes('//')) {
       lines[l] = lines[l].slice(0, lines[l].indexOf('//'));
     }
@@ -149,7 +149,7 @@ function removeSourceComments (source) {
  * 
  * @returns {boolean} Import recursion has occurred
  */
-function checkRecursiveImports (path, warn) {
+function checkRecursiveImports(path, warn) {
   warn && checkDuplicatedImports(path);
   return checkIncludedDependencies(path, path);
 }
@@ -165,7 +165,7 @@ function checkRecursiveImports (path, warn) {
  * 
  * @returns {boolean} Included chunk started a recursion
  */
-function checkIncludedDependencies (path, root) {
+function checkIncludedDependencies(path, root) {
   const dependencies = dependentChunks.get(path);
   let recursiveDependency = false;
 
@@ -192,7 +192,7 @@ function checkIncludedDependencies (path, root) {
  * 
  * @returns {string} Compressed shader's source code
  */
-function compressShader (shader, newLine = false) {
+function compressShader(shader, newLine = false) {
   return shader.replace(/\\(?:\r\n|\n\r|\n|\r)|\/\*.*?\*\/|\/\/(?:\\(?:\r\n|\n\r|\n|\r)|[^\n\r])*/g, '')
     .split(/\n+/).reduce((result, line) => {
       line = line.trim().replace(/\s{2,}|\t/, ' ');
@@ -231,14 +231,16 @@ function compressShader (shader, newLine = false) {
  * 
  * @returns {string} Shader's source code without external chunks
  */
-function loadChunks (source, path, extension, warn, root) {
+function loadChunks(source, path, extension, warn, root) {
   const unixPath = path.split(sep).join(posix.sep);
 
   if (checkRecursiveImports(unixPath, warn)) {
     return recursiveChunk;
   }
 
-  source = removeSourceComments(source);
+  // Removed for code injection purposes
+  // source = removeSourceComments(source);
+
   let directory = dirname(unixPath);
   allChunks.add(unixPath);
 
@@ -326,8 +328,8 @@ export default function (source, shader, options) {
     dependentChunks,
     outputShader: compress
       ? typeof compress !== 'function'
-      ? compressShader(output)
-      : compress(output)
+        ? compressShader(output)
+        : compress(output)
       : output
   };
 }
